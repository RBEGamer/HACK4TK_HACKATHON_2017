{
  "id": "mock-content/components-navigation-content",
  "pageTemplate": "content-right",
  "title": "hack4tk Startpage!",
  "elements": {
    "content": [
      {
        "className": "page-headline",
        "element": {
          "headline": "Components, Navigation & Content"
        }
      },
      {
        "className": "standard-text",
        "element": {
          "dark": true,
          "bodyHtml": "<h4>Components</h4><p>Here we call each module, you can use on the page, a component. This is mostly angular nomenclature. Since the platform at thyssenkrupp is content driven, each content-object for a components holds a classname to identify it. The classname gets mapped to a component which gets bootstrapped and rendered.</p><p>Additionally it holds a field called `element` which contains all editorial content it needs to get rendered. Inside the template of the component you can use {{element.</i>myField</i>}} to work with that content.</p><p>By the way: This component here is called `standard-text` and just renderes the text in {{element.bodyHtml}}. </p><p>If you want to render HTML, you need to add `[innerHTML]=\"element.bodyHtml\"` on a container element (like a div), so it doesn't get escaped. <h4>Ready to use components</h4><p>There are a lot of components (like this one) ready to use. Look in the project json-dummy-content in GitLab to find out what json structure you need, to include a component in your demo content."
        }
      },
      {
        "className": "standard-text",
        "element": {
          "dark": true,
          "bodyHtml": "<h4>Navigation</h4><p>Since you got here by clicking on a link, you can easily find out how navigation between pages are set up. Use the classname `internal-link` and set the necessary element parameters and you're good to go.</p>"
        }
      },
      {
        "className": "standard-text",
        "element": {
          "dark": true,
          "bodyHtml": "<h4>Content</h4><p>You're probably wondering, where all the content is coming from. Normally it gets retrieved from an REST-API. Since this is a sandbox, you dont need to worry about that, and just define all the content inside the mock data.</p>"
        }
      }
    ],
    "right": [
    ]
  }
}
